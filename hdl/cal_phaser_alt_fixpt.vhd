-- -------------------------------------------------------------
-- 
-- File Name: /u/home/eraguzin/matlab/LNspec/matlab/codegen/cal_phaser_alt/hdlsrc/cal_phaser_alt_fixpt.vhd
-- Created: 2024-01-10 17:53:58
-- 
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- calbin                        ce_out        1
-- phase_cor_re                  ce_out        1
-- phase_cor_im                  ce_out        1
-- kar_out                       ce_out        1
-- tick_out                      ce_out        1
-- readyout                      ce_out        1
-- update_drift                  ce_out        1
-- readycal                      ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: cal_phaser_alt_fixpt
-- Source Path: cal_phaser_alt_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY cal_phaser_alt_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        bin_in                            :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        cal_drift                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En43
        readyin                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        calbin                            :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        phase_cor_re                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        phase_cor_im                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        kar_out                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        tick_out                          :   OUT   std_logic_vector(1 DOWNTO 0);  -- sfix2
        readyout                          :   OUT   std_logic;
        update_drift                      :   OUT   std_logic;
        readycal                          :   OUT   std_logic
        );
END cal_phaser_alt_fixpt;


ARCHITECTURE rtl OF cal_phaser_alt_fixpt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL calbin_1                         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL bin_in_unsigned                  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL modbin                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p206tmp_add_temp                 : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL p206tmp_cast                     : unsigned(14 DOWNTO 0);  -- ufix15_En2
  SIGNAL p206tmp_cast_1                   : unsigned(14 DOWNTO 0);  -- ufix15_En2
  SIGNAL calbin_2                         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_2                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_3                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL phase_cor_re_1                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_cor_im_1                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_not_empty                  : std_logic;
  SIGNAL phase_not_empty_1                : std_logic;
  SIGNAL tmp_4                            : std_logic;
  SIGNAL tmp_5                            : std_logic;
  SIGNAL tmp_6                            : std_logic;
  SIGNAL phase_st_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_st_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_7                            : std_logic;
  SIGNAL tmp_re_1                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_1                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_8                            : std_logic;
  SIGNAL tmp_9                            : std_logic;
  SIGNAL run_cordic                       : std_logic;
  SIGNAL tmp_10                           : std_logic;
  SIGNAL tmp_11                           : std_logic;
  SIGNAL run_cordic_1                     : std_logic;
  SIGNAL run_cordic_2                     : std_logic;
  SIGNAL tmp_12                           : std_logic;
  SIGNAL tmp_13                           : std_logic;
  SIGNAL tmp_14                           : std_logic;
  SIGNAL tmp_15                           : std_logic;
  SIGNAL tmp_16                           : std_logic;
  SIGNAL tmp_17                           : std_logic;
  SIGNAL run_cordic_3                     : std_logic;
  SIGNAL tmp_18                           : std_logic;
  SIGNAL cordic_out_re                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL cordic_out_im                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_19                           : std_logic;
  SIGNAL tmp_20                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL tmp_21                           : std_logic;
  SIGNAL cal_drift_signed                 : signed(31 DOWNTO 0);  -- sfix32_En43
  SIGNAL phase                            : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL tmp_22                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL tmp_23                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL p174tmp_1                        : signed(37 DOWNTO 0);  -- sfix38_En33
  SIGNAL p174tmp_add_cast                 : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL phase_1                          : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL tmp_24                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL p178tmp_1                        : signed(37 DOWNTO 0);  -- sfix38_En33
  SIGNAL p178tmp_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL tmp_25                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL p179phase_add_cast               : signed(42 DOWNTO 0);  -- sfix43_En43
  SIGNAL p179phase_add_cast_1             : signed(42 DOWNTO 0);  -- sfix43_En43
  SIGNAL p179phase_add_temp               : signed(42 DOWNTO 0);  -- sfix43_En43
  SIGNAL tmp_26                           : std_logic;
  SIGNAL tmp_27                           : std_logic;
  SIGNAL tmp_28                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL tmp_29                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL tmp_30                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL tmp_31                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL tmp_32                           : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL phase_2                          : signed(31 DOWNTO 0);  -- sfix32_En33
  SIGNAL x                                : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p140x_cast                       : signed(32 DOWNTO 0);  -- sfix33_En33
  SIGNAL p140x_cast_1                     : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL p140x_cast_2                     : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL p140x_add_cast                   : signed(32 DOWNTO 0);  -- sfix33_En33
  SIGNAL p140x_add_cast_1                 : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_33                           : std_logic;
  SIGNAL tmp_34                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p139tmp_1                        : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL p139tmp_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_35                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_36                           : std_logic;
  SIGNAL sign                             : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_37                           : std_logic;
  SIGNAL tmp_38                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p134tmp_cast                     : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL p134tmp_cast_1                   : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL p134tmp_cast_2                   : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL p134tmp_cast_3                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL tmp_39                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_40                           : std_logic;
  SIGNAL p125tmp_cast                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL tmp_41                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p126tmp_1                        : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL p126tmp_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_42                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_43                           : std_logic;
  SIGNAL p112tmp_cast                     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL d                                : unsigned(31 DOWNTO 0);  -- ufix32_En34
  SIGNAL d3                               : unsigned(31 DOWNTO 0);  -- ufix32_En40
  SIGNAL p120d3_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En68
  SIGNAL p120d3_mul_temp_1                : unsigned(95 DOWNTO 0);  -- ufix96_En102
  SIGNAL d2                               : unsigned(31 DOWNTO 0);  -- ufix32_En37
  SIGNAL p121d2_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En68
  SIGNAL d5                               : unsigned(31 DOWNTO 0);  -- ufix32_En46
  SIGNAL p119d5_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En77
  SIGNAL tmp_44                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p118tmp_sub_cast                 : signed(77 DOWNTO 0);  -- sfix78_En74
  SIGNAL p118tmp_mul_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En74
  SIGNAL p118tmp_sub_cast_1               : signed(77 DOWNTO 0);  -- sfix78_En74
  SIGNAL p118tmp_sub_temp                 : signed(77 DOWNTO 0);  -- sfix78_En74
  SIGNAL p118tmp_add_cast                 : signed(89 DOWNTO 0);  -- sfix90_En84
  SIGNAL p118tmp_mul_temp_1               : unsigned(63 DOWNTO 0);  -- ufix64_En84
  SIGNAL p118tmp_add_cast_1               : signed(89 DOWNTO 0);  -- sfix90_En84
  SIGNAL p118tmp_add_temp                 : signed(89 DOWNTO 0);  -- sfix90_En84
  SIGNAL p118tmp_sub_cast_2               : signed(103 DOWNTO 0);  -- sfix104_En96
  SIGNAL p118tmp_mul_temp_2               : unsigned(63 DOWNTO 0);  -- ufix64_En83
  SIGNAL p118tmp_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En52
  SIGNAL p118tmp_mul_temp_3               : unsigned(63 DOWNTO 0);  -- ufix64_En96
  SIGNAL p118tmp_sub_cast_3               : signed(103 DOWNTO 0);  -- sfix104_En96
  SIGNAL p118tmp_sub_temp_1               : signed(103 DOWNTO 0);  -- sfix104_En96
  SIGNAL d_1                              : unsigned(31 DOWNTO 0);  -- ufix32_En34
  SIGNAL p117d_sub_cast                   : signed(35 DOWNTO 0);  -- sfix36_En32
  SIGNAL p117d_sub_temp                   : signed(35 DOWNTO 0);  -- sfix36_En32
  SIGNAL d2_1                             : unsigned(31 DOWNTO 0);  -- ufix32_En37
  SIGNAL p116d2_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En68
  SIGNAL d4                               : unsigned(31 DOWNTO 0);  -- ufix32_En43
  SIGNAL p115d4_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En74
  SIGNAL d6                               : unsigned(31 DOWNTO 0);  -- ufix32_En49
  SIGNAL p114d6_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En80
  SIGNAL tmp_45                           : std_logic;
  SIGNAL p107tmp_cast                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL tmp_46                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p113tmp_add_cast                 : unsigned(35 DOWNTO 0);  -- ufix36_En34
  SIGNAL p113tmp_add_temp                 : unsigned(35 DOWNTO 0);  -- ufix36_En34
  SIGNAL p113tmp_sub_cast                 : signed(73 DOWNTO 0);  -- sfix74_En69
  SIGNAL p113tmp_sub_cast_1               : unsigned(63 DOWNTO 0);  -- ufix64_En69
  SIGNAL p113tmp_sub_cast_2               : signed(73 DOWNTO 0);  -- sfix74_En69
  SIGNAL p113tmp_sub_temp                 : signed(73 DOWNTO 0);  -- sfix74_En69
  SIGNAL p113tmp_sub_cast_3               : signed(80 DOWNTO 0);  -- sfix81_En74
  SIGNAL p113tmp_mul_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En71
  SIGNAL p113tmp_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En40
  SIGNAL p113tmp_mul_temp_1               : unsigned(63 DOWNTO 0);  -- ufix64_En74
  SIGNAL p113tmp_sub_cast_4               : signed(80 DOWNTO 0);  -- sfix81_En74
  SIGNAL p113tmp_sub_temp_1               : signed(80 DOWNTO 0);  -- sfix81_En74
  SIGNAL p113tmp_add_cast_1               : signed(87 DOWNTO 0);  -- sfix88_En79
  SIGNAL p113tmp_mul_temp_2               : unsigned(63 DOWNTO 0);  -- ufix64_En79
  SIGNAL p113tmp_add_cast_2               : signed(87 DOWNTO 0);  -- sfix88_En79
  SIGNAL p113tmp_add_temp_1               : signed(87 DOWNTO 0);  -- sfix88_En79
  SIGNAL p113tmp_add_cast_3               : signed(94 DOWNTO 0);  -- sfix95_En84
  SIGNAL p113tmp_mul_temp_3               : unsigned(63 DOWNTO 0);  -- ufix64_En77
  SIGNAL p113tmp_cast_1                   : unsigned(31 DOWNTO 0);  -- ufix32_En46
  SIGNAL p113tmp_mul_temp_4               : unsigned(63 DOWNTO 0);  -- ufix64_En84
  SIGNAL p113tmp_add_cast_4               : signed(94 DOWNTO 0);  -- sfix95_En84
  SIGNAL p113tmp_add_temp_2               : signed(94 DOWNTO 0);  -- sfix95_En84
  SIGNAL p113tmp_sub_cast_5               : signed(102 DOWNTO 0);  -- sfix103_En90
  SIGNAL p113tmp_mul_temp_5               : unsigned(63 DOWNTO 0);  -- ufix64_En90
  SIGNAL p113tmp_sub_cast_6               : signed(102 DOWNTO 0);  -- sfix103_En90
  SIGNAL p113tmp_sub_temp_2               : signed(102 DOWNTO 0);  -- sfix103_En90
  SIGNAL p113tmp_sub_cast_7               : signed(110 DOWNTO 0);  -- sfix111_En96
  SIGNAL p113tmp_mul_temp_6               : unsigned(63 DOWNTO 0);  -- ufix64_En83
  SIGNAL p113tmp_cast_2                   : unsigned(31 DOWNTO 0);  -- ufix32_En52
  SIGNAL p113tmp_mul_temp_7               : unsigned(63 DOWNTO 0);  -- ufix64_En96
  SIGNAL p113tmp_sub_cast_8               : signed(110 DOWNTO 0);  -- sfix111_En96
  SIGNAL p113tmp_sub_temp_3               : signed(110 DOWNTO 0);  -- sfix111_En96
  SIGNAL p113tmp_add_cast_5               : signed(118 DOWNTO 0);  -- sfix119_En102
  SIGNAL p113tmp_mul_temp_8               : unsigned(63 DOWNTO 0);  -- ufix64_En86
  SIGNAL p113tmp_cast_3                   : unsigned(31 DOWNTO 0);  -- ufix32_En55
  SIGNAL p113tmp_mul_temp_9               : unsigned(63 DOWNTO 0);  -- ufix64_En102
  SIGNAL p113tmp_add_cast_6               : signed(118 DOWNTO 0);  -- sfix119_En102
  SIGNAL p113tmp_add_temp_3               : signed(118 DOWNTO 0);  -- sfix119_En102
  SIGNAL p113tmp_cast_4                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p113tmp_mul_temp_10              : signed(64 DOWNTO 0);  -- sfix65_En62
  SIGNAL p113tmp_cast_5                   : signed(63 DOWNTO 0);  -- sfix64_En62
  SIGNAL tmp_47                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL d2_2                             : unsigned(31 DOWNTO 0);  -- ufix32_En37
  SIGNAL p110d2_d                         : unsigned(31 DOWNTO 0);  -- ufix32_En34
  SIGNAL p110d2_sub_cast                  : signed(34 DOWNTO 0);  -- sfix35_En31
  SIGNAL p110d2_sub_temp                  : signed(34 DOWNTO 0);  -- sfix35_En31
  SIGNAL p110d2_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En68
  SIGNAL d4_1                             : unsigned(31 DOWNTO 0);  -- ufix32_En43
  SIGNAL p109d4_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En74
  SIGNAL x_1                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p170x_cast                       : signed(32 DOWNTO 0);  -- sfix33_En33
  SIGNAL p170x_cast_1                     : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL p170x_cast_2                     : signed(33 DOWNTO 0);  -- sfix34_En33
  SIGNAL p170x_cast_3                     : signed(32 DOWNTO 0);  -- sfix33_En33
  SIGNAL tmp_48                           : std_logic;
  SIGNAL sign_1                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_49                           : std_logic;
  SIGNAL tmp_50                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p169tmp_cast                     : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL p169tmp_cast_1                   : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL p169tmp_cast_2                   : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL p169tmp_cast_3                   : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL tmp_51                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_52                           : std_logic;
  SIGNAL p160tmp_cast                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL tmp_53                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p161tmp_1                        : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL p161tmp_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_54                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_55                           : std_logic;
  SIGNAL p144tmp_cast                     : signed(34 DOWNTO 0);  -- sfix35_En33
  SIGNAL d_2                              : unsigned(31 DOWNTO 0);  -- ufix32_En34
  SIGNAL d3_1                             : unsigned(31 DOWNTO 0);  -- ufix32_En40
  SIGNAL p148d3_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En68
  SIGNAL p148d3_mul_temp_1                : unsigned(95 DOWNTO 0);  -- ufix96_En102
  SIGNAL d2_3                             : unsigned(31 DOWNTO 0);  -- ufix32_En37
  SIGNAL p147d2_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En68
  SIGNAL d5_1                             : unsigned(31 DOWNTO 0);  -- ufix32_En46
  SIGNAL p146d5_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En77
  SIGNAL tmp_56                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p145tmp_sub_cast                 : signed(77 DOWNTO 0);  -- sfix78_En74
  SIGNAL p145tmp_mul_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En74
  SIGNAL p145tmp_sub_cast_1               : signed(77 DOWNTO 0);  -- sfix78_En74
  SIGNAL p145tmp_sub_temp                 : signed(77 DOWNTO 0);  -- sfix78_En74
  SIGNAL p145tmp_add_cast                 : signed(89 DOWNTO 0);  -- sfix90_En84
  SIGNAL p145tmp_mul_temp_1               : unsigned(63 DOWNTO 0);  -- ufix64_En84
  SIGNAL p145tmp_add_cast_1               : signed(89 DOWNTO 0);  -- sfix90_En84
  SIGNAL p145tmp_add_temp                 : signed(89 DOWNTO 0);  -- sfix90_En84
  SIGNAL p145tmp_sub_cast_2               : signed(103 DOWNTO 0);  -- sfix104_En96
  SIGNAL p145tmp_mul_temp_2               : unsigned(63 DOWNTO 0);  -- ufix64_En83
  SIGNAL p145tmp_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En52
  SIGNAL p145tmp_mul_temp_3               : unsigned(63 DOWNTO 0);  -- ufix64_En96
  SIGNAL p145tmp_sub_cast_3               : signed(103 DOWNTO 0);  -- sfix104_En96
  SIGNAL p145tmp_sub_temp_1               : signed(103 DOWNTO 0);  -- sfix104_En96
  SIGNAL d_3                              : unsigned(31 DOWNTO 0);  -- ufix32_En34
  SIGNAL p154d_sub_cast                   : signed(35 DOWNTO 0);  -- sfix36_En32
  SIGNAL p154d_sub_temp                   : signed(35 DOWNTO 0);  -- sfix36_En32
  SIGNAL d2_4                             : unsigned(31 DOWNTO 0);  -- ufix32_En37
  SIGNAL p153d2_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En68
  SIGNAL d4_2                             : unsigned(31 DOWNTO 0);  -- ufix32_En43
  SIGNAL p152d4_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En74
  SIGNAL d6_1                             : unsigned(31 DOWNTO 0);  -- ufix32_En49
  SIGNAL p151d6_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En80
  SIGNAL tmp_57                           : std_logic;
  SIGNAL p142tmp_cast                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL tmp_58                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p150tmp_add_cast                 : unsigned(35 DOWNTO 0);  -- ufix36_En34
  SIGNAL p150tmp_add_temp                 : unsigned(35 DOWNTO 0);  -- ufix36_En34
  SIGNAL p150tmp_sub_cast                 : signed(73 DOWNTO 0);  -- sfix74_En69
  SIGNAL p150tmp_sub_cast_1               : unsigned(63 DOWNTO 0);  -- ufix64_En69
  SIGNAL p150tmp_sub_cast_2               : signed(73 DOWNTO 0);  -- sfix74_En69
  SIGNAL p150tmp_sub_temp                 : signed(73 DOWNTO 0);  -- sfix74_En69
  SIGNAL p150tmp_sub_cast_3               : signed(80 DOWNTO 0);  -- sfix81_En74
  SIGNAL p150tmp_mul_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En71
  SIGNAL p150tmp_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En40
  SIGNAL p150tmp_mul_temp_1               : unsigned(63 DOWNTO 0);  -- ufix64_En74
  SIGNAL p150tmp_sub_cast_4               : signed(80 DOWNTO 0);  -- sfix81_En74
  SIGNAL p150tmp_sub_temp_1               : signed(80 DOWNTO 0);  -- sfix81_En74
  SIGNAL p150tmp_add_cast_1               : signed(87 DOWNTO 0);  -- sfix88_En79
  SIGNAL p150tmp_mul_temp_2               : unsigned(63 DOWNTO 0);  -- ufix64_En79
  SIGNAL p150tmp_add_cast_2               : signed(87 DOWNTO 0);  -- sfix88_En79
  SIGNAL p150tmp_add_temp_1               : signed(87 DOWNTO 0);  -- sfix88_En79
  SIGNAL p150tmp_add_cast_3               : signed(94 DOWNTO 0);  -- sfix95_En84
  SIGNAL p150tmp_mul_temp_3               : unsigned(63 DOWNTO 0);  -- ufix64_En77
  SIGNAL p150tmp_cast_1                   : unsigned(31 DOWNTO 0);  -- ufix32_En46
  SIGNAL p150tmp_mul_temp_4               : unsigned(63 DOWNTO 0);  -- ufix64_En84
  SIGNAL p150tmp_add_cast_4               : signed(94 DOWNTO 0);  -- sfix95_En84
  SIGNAL p150tmp_add_temp_2               : signed(94 DOWNTO 0);  -- sfix95_En84
  SIGNAL p150tmp_sub_cast_5               : signed(102 DOWNTO 0);  -- sfix103_En90
  SIGNAL p150tmp_mul_temp_5               : unsigned(63 DOWNTO 0);  -- ufix64_En90
  SIGNAL p150tmp_sub_cast_6               : signed(102 DOWNTO 0);  -- sfix103_En90
  SIGNAL p150tmp_sub_temp_2               : signed(102 DOWNTO 0);  -- sfix103_En90
  SIGNAL p150tmp_sub_cast_7               : signed(110 DOWNTO 0);  -- sfix111_En96
  SIGNAL p150tmp_mul_temp_6               : unsigned(63 DOWNTO 0);  -- ufix64_En83
  SIGNAL p150tmp_cast_2                   : unsigned(31 DOWNTO 0);  -- ufix32_En52
  SIGNAL p150tmp_mul_temp_7               : unsigned(63 DOWNTO 0);  -- ufix64_En96
  SIGNAL p150tmp_sub_cast_8               : signed(110 DOWNTO 0);  -- sfix111_En96
  SIGNAL p150tmp_sub_temp_3               : signed(110 DOWNTO 0);  -- sfix111_En96
  SIGNAL p150tmp_add_cast_5               : signed(118 DOWNTO 0);  -- sfix119_En102
  SIGNAL p150tmp_mul_temp_8               : unsigned(63 DOWNTO 0);  -- ufix64_En86
  SIGNAL p150tmp_cast_3                   : unsigned(31 DOWNTO 0);  -- ufix32_En55
  SIGNAL p150tmp_mul_temp_9               : unsigned(63 DOWNTO 0);  -- ufix64_En102
  SIGNAL p150tmp_add_cast_6               : signed(118 DOWNTO 0);  -- sfix119_En102
  SIGNAL p150tmp_add_temp_3               : signed(118 DOWNTO 0);  -- sfix119_En102
  SIGNAL p150tmp_cast_4                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p150tmp_mul_temp_10              : signed(64 DOWNTO 0);  -- sfix65_En62
  SIGNAL p150tmp_cast_5                   : signed(63 DOWNTO 0);  -- sfix64_En62
  SIGNAL tmp_59                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL d2_5                             : unsigned(31 DOWNTO 0);  -- ufix32_En37
  SIGNAL p157d2_d                         : unsigned(31 DOWNTO 0);  -- ufix32_En34
  SIGNAL p157d2_sub_cast                  : signed(34 DOWNTO 0);  -- sfix35_En31
  SIGNAL p157d2_sub_temp                  : signed(34 DOWNTO 0);  -- sfix35_En31
  SIGNAL p157d2_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En68
  SIGNAL d4_3                             : unsigned(31 DOWNTO 0);  -- ufix32_En43
  SIGNAL p156d4_mul_temp                  : unsigned(63 DOWNTO 0);  -- ufix64_En74
  SIGNAL sign_2                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_60                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_61                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p108tmp_sub_cast                 : unsigned(63 DOWNTO 0);  -- ufix64_En69
  SIGNAL p108tmp_sub_cast_1               : unsigned(70 DOWNTO 0);  -- ufix71_En69
  SIGNAL p108tmp_sub_temp                 : unsigned(70 DOWNTO 0);  -- ufix71_En69
  SIGNAL p108tmp_add_cast                 : unsigned(81 DOWNTO 0);  -- ufix82_En79
  SIGNAL p108tmp_mul_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En79
  SIGNAL p108tmp_add_cast_1               : unsigned(81 DOWNTO 0);  -- ufix82_En79
  SIGNAL p108tmp_add_temp                 : unsigned(81 DOWNTO 0);  -- ufix82_En79
  SIGNAL p108tmp_sub_cast_2               : unsigned(93 DOWNTO 0);  -- ufix94_En90
  SIGNAL p108tmp_mul_temp_1               : unsigned(63 DOWNTO 0);  -- ufix64_En80
  SIGNAL p108tmp_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En49
  SIGNAL p108tmp_mul_temp_2               : unsigned(63 DOWNTO 0);  -- ufix64_En90
  SIGNAL p108tmp_sub_cast_3               : unsigned(93 DOWNTO 0);  -- ufix94_En90
  SIGNAL p108tmp_sub_temp_1               : unsigned(93 DOWNTO 0);  -- ufix94_En90
  SIGNAL p108tmp_add_cast_2               : unsigned(106 DOWNTO 0);  -- ufix107_En102
  SIGNAL p108tmp_mul_temp_3               : unsigned(63 DOWNTO 0);  -- ufix64_En86
  SIGNAL p108tmp_cast_1                   : unsigned(31 DOWNTO 0);  -- ufix32_En55
  SIGNAL p108tmp_mul_temp_4               : unsigned(63 DOWNTO 0);  -- ufix64_En102
  SIGNAL p108tmp_add_cast_3               : unsigned(106 DOWNTO 0);  -- ufix107_En102
  SIGNAL p108tmp_add_temp_1               : unsigned(106 DOWNTO 0);  -- ufix107_En102
  SIGNAL tmp_62                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL sign_3                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_63                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_64                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p155tmp_sub_cast                 : unsigned(63 DOWNTO 0);  -- ufix64_En69
  SIGNAL p155tmp_sub_cast_1               : unsigned(70 DOWNTO 0);  -- ufix71_En69
  SIGNAL p155tmp_sub_temp                 : unsigned(70 DOWNTO 0);  -- ufix71_En69
  SIGNAL p155tmp_add_cast                 : unsigned(81 DOWNTO 0);  -- ufix82_En79
  SIGNAL p155tmp_mul_temp                 : unsigned(63 DOWNTO 0);  -- ufix64_En79
  SIGNAL p155tmp_add_cast_1               : unsigned(81 DOWNTO 0);  -- ufix82_En79
  SIGNAL p155tmp_add_temp                 : unsigned(81 DOWNTO 0);  -- ufix82_En79
  SIGNAL p155tmp_sub_cast_2               : unsigned(93 DOWNTO 0);  -- ufix94_En90
  SIGNAL p155tmp_mul_temp_1               : unsigned(63 DOWNTO 0);  -- ufix64_En80
  SIGNAL p155tmp_cast                     : unsigned(31 DOWNTO 0);  -- ufix32_En49
  SIGNAL p155tmp_mul_temp_2               : unsigned(63 DOWNTO 0);  -- ufix64_En90
  SIGNAL p155tmp_sub_cast_3               : unsigned(93 DOWNTO 0);  -- ufix94_En90
  SIGNAL p155tmp_sub_temp_1               : unsigned(93 DOWNTO 0);  -- ufix94_En90
  SIGNAL p155tmp_add_cast_2               : unsigned(106 DOWNTO 0);  -- ufix107_En102
  SIGNAL p155tmp_mul_temp_3               : unsigned(63 DOWNTO 0);  -- ufix64_En86
  SIGNAL p155tmp_cast_1                   : unsigned(31 DOWNTO 0);  -- ufix32_En55
  SIGNAL p155tmp_mul_temp_4               : unsigned(63 DOWNTO 0);  -- ufix64_En102
  SIGNAL p155tmp_add_cast_3               : unsigned(106 DOWNTO 0);  -- ufix107_En102
  SIGNAL p155tmp_add_temp_1               : unsigned(106 DOWNTO 0);  -- ufix107_En102
  SIGNAL tmp_65                           : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_2                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_2                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p105tmp_mul_temp                 : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL p105tmp_cast                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p105tmp_cast_1                   : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL p105tmp_mul_temp_1               : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL tmp_re_3                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_3                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL cordic_out_re_1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL cordic_out_im_1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_4                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_4                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ar                               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL br                               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ai                               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL bi                               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_mult2_re                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_mult2_im                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p0phase_mult2_mul_temp           : signed(63 DOWNTO 0);  -- sfix64_En60
  SIGNAL p0phase_mult2_sub_cast           : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p0phase_mult2_mul_temp_1         : signed(63 DOWNTO 0);  -- sfix64_En60
  SIGNAL p0phase_mult2_sub_cast_1         : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p0phase_mult2_sub_temp           : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p0phase_mult2_mul_temp_2         : signed(63 DOWNTO 0);  -- sfix64_En60
  SIGNAL p0phase_mult2_add_cast           : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p0phase_mult2_mul_temp_3         : signed(63 DOWNTO 0);  -- sfix64_En60
  SIGNAL p0phase_mult2_add_cast_1         : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p0phase_mult2_add_temp           : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL phase_mult2_re_1                 : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_mult2_im_1                 : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_5                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_5                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_6                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_6                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_7                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_7                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_8                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_8                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_9                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_9                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_mult2_re_2                 : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_mult2_im_2                 : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL br_1                             : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_66                           : std_logic;
  SIGNAL bi_1                             : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_10                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_10                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ai_1                             : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_11                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_11                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_12                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_12                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_13                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_13                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_st_re_1                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL phase_st_im_1                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL ar_1                             : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_14                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_14                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL p98tmp_mul_temp                  : signed(63 DOWNTO 0);  -- sfix64_En60
  SIGNAL p98tmp_sub_cast                  : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p98tmp_mul_temp_1                : signed(63 DOWNTO 0);  -- sfix64_En60
  SIGNAL p98tmp_sub_cast_1                : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p98tmp_sub_temp                  : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p98tmp_mul_temp_2                : signed(63 DOWNTO 0);  -- sfix64_En60
  SIGNAL p98tmp_add_cast                  : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p98tmp_mul_temp_3                : signed(63 DOWNTO 0);  -- sfix64_En60
  SIGNAL p98tmp_add_cast_1                : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL p98tmp_add_temp                  : signed(64 DOWNTO 0);  -- sfix65_En60
  SIGNAL tmp_re_15                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_15                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_16                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_16                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_re_17                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL tmp_im_17                        : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL kar_out_1                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL tmp_67                           : std_logic;
  SIGNAL tmp_68                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_69                           : std_logic;
  SIGNAL Nac                              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Nac_1                            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_70                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Nac_2                            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_71                           : std_logic;
  SIGNAL tmp_72                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_73                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_74                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_75                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_76                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Nac_3                            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL kar_out_2                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL p0kar_out_sub_cast               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_77                           : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL tmp_78                           : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL tmp_79                           : std_logic;
  SIGNAL tmp_80                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_81                           : std_logic;
  SIGNAL tick                             : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_82                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_83                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p103tmp_1                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL tmp_84                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_85                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_86                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_87                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tick_1                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL readyout_1                       : std_logic;
  SIGNAL tmp_88                           : std_logic;
  SIGNAL readyout_2                       : std_logic;
  SIGNAL tmp_89                           : std_logic;
  SIGNAL tmp_90                           : std_logic;
  SIGNAL tmp_91                           : std_logic;
  SIGNAL update_drift_1                   : std_logic;
  SIGNAL tmp_92                           : std_logic;
  SIGNAL tmp_93                           : std_logic;
  SIGNAL tmp_94                           : std_logic;
  SIGNAL update_drift_2                   : std_logic;
  SIGNAL tmp_95                           : std_logic;
  SIGNAL tmp_96                           : std_logic;
  SIGNAL tmp_97                           : std_logic;
  SIGNAL tmp_98                           : std_logic;
  SIGNAL tmp_99                           : std_logic;
  SIGNAL readycal_1                       : std_logic;
  SIGNAL readycal_2                       : std_logic;
  SIGNAL tmp_100                          : std_logic;
  SIGNAL tmp_101                          : std_logic;

BEGIN
  -- 'cal_phaser_alt_fixpt:22' calbin = fi(0, 0, 10, 0, fm);
  calbin_1 <= to_unsigned(16#000#, 10);

  bin_in_unsigned <= unsigned(bin_in);

  -- 'cal_phaser_alt_fixpt:42' if modbin==fi(2, 0, 2, 0, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:43' calbin(:) = fi_div_by_shift((bin_in+fi(2, 0, 2, 0, fm)), 2);
  -- 
  -- 'cal_phaser_alt_fixpt:172' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:173' if isfi( a )
  -- 
  -- 'cal_phaser_alt_fixpt:174' nt = numerictype( a );
  -- 
  -- 'cal_phaser_alt_fixpt:175' fm = fimath( a );
  -- 
  -- 'cal_phaser_alt_fixpt:176' nt_bs = numerictype( nt.Signed, nt.WordLength + shift_len, nt.FractionLength + shift_len 
  -- )
  -- 
  -- 'cal_phaser_alt_fixpt:177' y = bitsra( fi( a, nt_bs, fm ), shift_len );
  modbin <= resize(resize(bin_in_unsigned, 13) - resize((SHIFT_RIGHT(bin_in_unsigned, 2)) sll 2, 13), 2);

  
  tmp <= '1' WHEN modbin = to_unsigned(16#2#, 2) ELSE
      '0';

  -- 'cal_phaser_alt_fixpt:44' kk = fi((fi(2, 0, 2, 0, fm)*calbin-fi(1, 0, 1, 0, fm)), 0, 10, 0, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:45' kar = fi(kk*(Nac-fi(1, 0, 1, 0, fm)), 0, 16, 0, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:46' kar_out(:) = kar;
  -- 
  -- 'cal_phaser_alt_fixpt:47' readycal(:) = true;
  -- 
  -- 'cal_phaser_alt_fixpt:48' if (calbin == fi(1, 0, 1, 0, fm))
  -- 
  -- 'cal_phaser_alt_fixpt:52' else
  -- 
  -- 'cal_phaser_alt_fixpt:53' phase_st(:) = phase_st * phase_mult2;
  -- 
  -- phase_st = exp(complex(0,-phase));
  -- 
  -- 'cal_phaser_alt_fixpt:50' phase_st(:) = cordic_out;
  -- 
  -- 'cal_phaser_alt_fixpt:51' phase_mult2(:) = phase_st*phase_st;
  -- 
  -- 'cal_phaser_alt_fixpt:56' phase_cor(:) = phase_st;
  -- 
  -- 'cal_phaser_alt_fixpt:57' if Nac == (fi(64, 0, 7, 0, fm))
  -- 
  -- 'cal_phaser_alt_fixpt:58' readyout(:) = true;
  -- 
  -- 'cal_phaser_alt_fixpt:60' if calbin == fi(512, 0, 10, 0, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:61' Nac(:) = Nac + fi(1, 0, 1, 0, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:62' tick(:) = tick*(fi(-1, 1, 2, 0, fm));
  -- 
  -- 'cal_phaser_alt_fixpt:63' phase(:) = phase+cal_drift;
  -- 
  -- 'cal_phaser_alt_fixpt:64' if (phase>fi(pi, 0, 32, 30, fm))
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- F2F: Start block
  -- 
  -- 'cal_phaser_alt_fixpt:67' phase(:) = phase-fi(2*pi, 0, 32, 29, fm);
  -- 
  -- F2F: End block
  -- 
  -- 'cal_phaser_alt_fixpt:70' if (phase<fi(-pi, 1, 32, 29, fm))
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- F2F: Start block
  -- 
  -- 'cal_phaser_alt_fixpt:73' phase(:) = phase+fi(2*pi, 0, 32, 29, fm);
  -- 
  -- F2F: End block
  -- 
  -- now we have new phase, get new sin / cos
  -- 
  -- 'cal_phaser_alt_fixpt:77' run_cordic(:) = true;
  -- 
  -- 'cal_phaser_alt_fixpt:79' if Nac > fi(64, 0, 7, 0, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:80' update_drift(:) = true;
  -- 
  -- 'cal_phaser_alt_fixpt:81' Nac(:) = 1;
  p206tmp_add_temp <= resize(bin_in_unsigned, 13) + to_unsigned(16#0002#, 13);
  p206tmp_cast <= p206tmp_add_temp & '0' & '0';
  p206tmp_cast_1 <= SHIFT_RIGHT(p206tmp_cast, 2);
  tmp_1 <= p206tmp_cast_1(11 DOWNTO 2);

  
  calbin_2 <= tmp_1 WHEN tmp = '1' ELSE
      to_unsigned(16#000#, 10);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp30
  
  tmp_2 <= calbin_2 WHEN tmp = '1' ELSE
      calbin_1;

  
  tmp_3 <= calbin_1 WHEN readyin = '0' ELSE
      tmp_2;

  calbin <= std_logic_vector(tmp_3);

  -- 'cal_phaser_alt_fixpt:23' phase_cor = fi(complex(0,0), 1, 32, 30, fm);
  phase_cor_re_1 <= to_signed(0, 32);
  phase_cor_im_1 <= to_signed(0, 32);

  tmp_re <= to_signed(0, 32);
  tmp_im <= to_signed(0, 32);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp181
  phase_not_empty <= '1';

  enb <= clk_enable;

  tmp_4 <=  NOT phase_not_empty_1;

  
  tmp_5 <= phase_not_empty_1 WHEN tmp_4 = '0' ELSE
      phase_not_empty;

  phase_not_empty_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_not_empty_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        phase_not_empty_1 <= tmp_5;
      END IF;
    END IF;
  END PROCESS phase_not_empty_reg_process;


  tmp_6 <=  NOT phase_not_empty_1;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp193
  phase_st_re <= to_signed(1073741824, 32);
  phase_st_im <= to_signed(0, 32);

  tmp_7 <=  NOT phase_not_empty_1;

  tmp_re_1 <= to_signed(0, 32);
  tmp_im_1 <= to_signed(0, 32);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp72
  
  tmp_8 <= '1' WHEN tmp_1 = to_unsigned(16#001#, 10) ELSE
      '0';

  tmp_9 <=  NOT phase_not_empty_1;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp80
  run_cordic <= '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt
  tmp_10 <= '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp69
  
  tmp_11 <= '1' WHEN tmp_1 = to_unsigned(16#200#, 10) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp69_trueregionp1
  run_cordic_1 <= '1';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp199
  run_cordic_2 <= '0';

  
  tmp_13 <= tmp_12 WHEN tmp_11 = '0' ELSE
      run_cordic_1;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp52
  
  tmp_14 <= tmp_10 WHEN tmp = '0' ELSE
      tmp_13;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp28
  
  tmp_15 <= tmp_12 WHEN tmp = '0' ELSE
      tmp_14;

  -- 'cal_phaser_alt_fixpt:32' if run_cordic
  -- 
  --    %% we should have spare cycles to do cordic stuff
  
  tmp_12 <= tmp_16 WHEN tmp_16 = '0' ELSE
      run_cordic;

  
  tmp_17 <= tmp_12 WHEN readyin = '0' ELSE
      tmp_15;

  run_cordic_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      run_cordic_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        run_cordic_3 <= tmp_17;
      END IF;
    END IF;
  END PROCESS run_cordic_reg_process;


  
  tmp_16 <= run_cordic_3 WHEN tmp_9 = '0' ELSE
      run_cordic_2;

  -- 'cal_phaser_alt_fixpt:12' if isempty(phase)
  -- 
  -- 'cal_phaser_alt_fixpt:8' fm = get_fimath();
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --          Generated by MATLAB 9.12 and Fixed-Point Designer 7.4           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- 'cal_phaser_alt_fixpt:13' phase = fi(0.0, 1, 32, 33, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:14' Nac = fi(1, 0, 7, 0, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:15' tick = fi(1, 1, 2, 0, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:16' phase_st = fi(complex(1,0), 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:17' phase_mult2 = fi(phase_st*phase_st, 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:18' run_cordic = false;
  -- 
  -- 'cal_phaser_alt_fixpt:19' cordic_out = fi(complex(1,0), 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:33' cordic_out(:) = complexx(mycos(fi_uminus(phase)), mysin(fi_uminus(phase)));
  -- 
  -- 'cal_phaser_alt_fixpt:197' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:198' if isfi( a )
  -- 
  -- 'cal_phaser_alt_fixpt:199' nt = numerictype( a );
  -- 
  -- 'cal_phaser_alt_fixpt:200' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'cal_phaser_alt_fixpt:201' y = -fi( a, new_nt, fimath( a ) );
  -- 
  -- 'cal_phaser_alt_fixpt:89' fm = get_fimath();
  -- 
  -- 'cal_phaser_alt_fixpt:90' x = fi(x_1, 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:92' x = fi(x + fi(pi/2, 0, 32, 31, fm), 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:93' if x > fi(pi, 0, 32, 30, fm)
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- F2F: Start block
  -- 
  -- 'cal_phaser_alt_fixpt:96' x(:) = x - fi(2*pi, 0, 32, 29, fm);
  -- 
  -- F2F: End block
  -- 
  -- 'cal_phaser_alt_fixpt:99' v = fi(mysin(x), 0, 32, 31, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:103' fm = get_fimath();
  -- 
  -- 'cal_phaser_alt_fixpt:104' x = fi(x_1, 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:106' if x < fi(0, 0, 1, 0, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:109' else
  -- 
  -- 'cal_phaser_alt_fixpt:110' sign = fi(1, 1, 2, 0, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:107' x = fi(fi_uminus(x), 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:197' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:198' if isfi( a )
  -- 
  -- 'cal_phaser_alt_fixpt:199' nt = numerictype( a );
  -- 
  -- 'cal_phaser_alt_fixpt:200' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'cal_phaser_alt_fixpt:201' y = -fi( a, new_nt, fimath( a ) );
  -- 
  -- 'cal_phaser_alt_fixpt:108' sign = fi(-1, 1, 2, 0, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:113' if x > fi(pi/2, 0, 32, 31, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:114' x = fi(fi(pi, 0, 32, 30, fm) - x, 1, 32, 30, fm);
  -- 
  -- assert(x >= 0 && x <= pi/2);
  -- 
  -- 'cal_phaser_alt_fixpt:118' if x > fi(3*pi/8, 0, 32, 31, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:140' else
  -- 
  -- 'cal_phaser_alt_fixpt:141' d = fi(x, 0, 32, 34, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:142' d2 = fi(d*d, 0, 32, 37, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:143' d3 = fi(d*d*d, 0, 32, 40, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:144' d5 = fi(d3*d2, 0, 32, 46, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:145' d7 = fi(d5*d2, 0, 32, 52, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:146' v = fi(x - fi(1/6, 0, 32, 34, fm)*d3 + fi(1/120, 0, 32, 38, fm)*d5 - fi(1/5040, 0, 32, 
  -- 44, fm)*d7, 1, 32, 30, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:125' elseif x > fi(pi/8, 0, 32, 33, fm)
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- F2F: Start block
  -- 
  -- 'cal_phaser_alt_fixpt:128' d = fi(x - fi(pi/4, 0, 32, 32, fm), 0, 32, 34, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:129' d2 = fi(d*d, 0, 32, 37, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:130' d3 = fi(d2*d, 0, 32, 40, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:131' d4 = fi(d2*d2, 0, 32, 43, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:132' d5 = fi(d4*d, 0, 32, 46, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:133' d6 = fi(d4*d2, 0, 32, 49, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:134' d7 = fi(d6*d, 0, 32, 52, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:135' d8 = fi(d4*d4, 0, 32, 55, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:137' v = fi(fi_signed(fi_signed(fi_signed(fi_signed(fi(1, 0, 1, 0, fm) + d) - fi(0.5, 0, 
  -- 32, 32, fm)*d2) - fi(1/6, 0, 32, 34, fm)*d3 + fi(1/24, 0, 32, 36, fm)*d4 + fi(1/120, 0, 32, 38, fm)*d5) - fi(1/720, 
  -- 0, 32, 41, fm)*d6) - fi(1/5040, 0, 32, 44, fm)*d7 + fi(1/40320, 0, 32, 47, fm)*d8, 1, 32, 30, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:185' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:186' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'cal_phaser_alt_fixpt:187' nt = numerictype( a );
  -- 
  -- 'cal_phaser_alt_fixpt:188' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'cal_phaser_alt_fixpt:189' y = fi( a, new_nt, fimath( a ) );
  -- 
  -- 'cal_phaser_alt_fixpt:185' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:186' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'cal_phaser_alt_fixpt:190' else
  -- 
  -- 'cal_phaser_alt_fixpt:191' y = a;
  -- 
  -- 'cal_phaser_alt_fixpt:185' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:186' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'cal_phaser_alt_fixpt:190' else
  -- 
  -- 'cal_phaser_alt_fixpt:191' y = a;
  -- 
  -- 'cal_phaser_alt_fixpt:185' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:186' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'cal_phaser_alt_fixpt:190' else
  -- 
  -- 'cal_phaser_alt_fixpt:191' y = a;
  -- 
  -- 'cal_phaser_alt_fixpt:138' v(:) = v * fi(0.7071067810, 0, 32, 32, fm);
  -- 
  -- F2F: End block
  -- 
  -- 'cal_phaser_alt_fixpt:119' d = fi(fi(pi/2, 0, 32, 31, fm) - x, 0, 32, 34, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:120' d2 = fi(d*d, 0, 32, 37, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:121' d4= fi(d2*d2, 0, 32, 43, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:122' d6 = fi(d4*d2, 0, 32, 49, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:123' d8 = fi(d4*d4, 0, 32, 55, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:124' v = fi(fi(1, 0, 1, 0, fm) - fi(0.5, 0, 32, 32, fm)*d2 + fi(1/24, 0, 32, 36, fm)*d4 - 
  -- fi(1/720, 0, 32, 41, fm)*d6 + fi(1/40320, 0, 32, 47, fm)*d8, 1, 32, 30, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:148' v = fi(sign * v, 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:197' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:198' if isfi( a )
  -- 
  -- 'cal_phaser_alt_fixpt:199' nt = numerictype( a );
  -- 
  -- 'cal_phaser_alt_fixpt:200' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'cal_phaser_alt_fixpt:201' y = -fi( a, new_nt, fimath( a ) );
  -- 
  -- 'cal_phaser_alt_fixpt:103' fm = get_fimath();
  -- 
  -- 'cal_phaser_alt_fixpt:104' x = fi(x_1, 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:106' if x < fi(0, 0, 1, 0, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:109' else
  -- 
  -- 'cal_phaser_alt_fixpt:110' sign = fi(1, 1, 2, 0, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:107' x = fi(fi_uminus(x), 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:197' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:198' if isfi( a )
  -- 
  -- 'cal_phaser_alt_fixpt:199' nt = numerictype( a );
  -- 
  -- 'cal_phaser_alt_fixpt:200' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'cal_phaser_alt_fixpt:201' y = -fi( a, new_nt, fimath( a ) );
  -- 
  -- 'cal_phaser_alt_fixpt:108' sign = fi(-1, 1, 2, 0, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:113' if x > fi(pi/2, 0, 32, 31, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:114' x = fi(fi(pi, 0, 32, 30, fm) - x, 1, 32, 30, fm);
  -- 
  -- assert(x >= 0 && x <= pi/2);
  -- 
  -- 'cal_phaser_alt_fixpt:118' if x > fi(3*pi/8, 0, 32, 31, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:140' else
  -- 
  -- 'cal_phaser_alt_fixpt:141' d = fi(x, 0, 32, 34, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:142' d2 = fi(d*d, 0, 32, 37, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:143' d3 = fi(d*d*d, 0, 32, 40, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:144' d5 = fi(d3*d2, 0, 32, 46, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:145' d7 = fi(d5*d2, 0, 32, 52, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:146' v = fi(x - fi(1/6, 0, 32, 34, fm)*d3 + fi(1/120, 0, 32, 38, fm)*d5 - fi(1/5040, 0, 32, 
  -- 44, fm)*d7, 1, 32, 30, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:125' elseif x > fi(pi/8, 0, 32, 33, fm)
  -- 
  -- F2F: No information found for converting the following block of code
  -- 
  -- F2F: Start block
  -- 
  -- 'cal_phaser_alt_fixpt:128' d = fi(x - fi(pi/4, 0, 32, 32, fm), 0, 32, 34, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:129' d2 = fi(d*d, 0, 32, 37, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:130' d3 = fi(d2*d, 0, 32, 40, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:131' d4 = fi(d2*d2, 0, 32, 43, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:132' d5 = fi(d4*d, 0, 32, 46, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:133' d6 = fi(d4*d2, 0, 32, 49, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:134' d7 = fi(d6*d, 0, 32, 52, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:135' d8 = fi(d4*d4, 0, 32, 55, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:137' v = fi(fi_signed(fi_signed(fi_signed(fi_signed(fi(1, 0, 1, 0, fm) + d) - fi(0.5, 0, 
  -- 32, 32, fm)*d2) - fi(1/6, 0, 32, 34, fm)*d3 + fi(1/24, 0, 32, 36, fm)*d4 + fi(1/120, 0, 32, 38, fm)*d5) - fi(1/720, 
  -- 0, 32, 41, fm)*d6) - fi(1/5040, 0, 32, 44, fm)*d7 + fi(1/40320, 0, 32, 47, fm)*d8, 1, 32, 30, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:185' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:186' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'cal_phaser_alt_fixpt:187' nt = numerictype( a );
  -- 
  -- 'cal_phaser_alt_fixpt:188' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'cal_phaser_alt_fixpt:189' y = fi( a, new_nt, fimath( a ) );
  -- 
  -- 'cal_phaser_alt_fixpt:185' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:186' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'cal_phaser_alt_fixpt:190' else
  -- 
  -- 'cal_phaser_alt_fixpt:191' y = a;
  -- 
  -- 'cal_phaser_alt_fixpt:185' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:186' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'cal_phaser_alt_fixpt:190' else
  -- 
  -- 'cal_phaser_alt_fixpt:191' y = a;
  -- 
  -- 'cal_phaser_alt_fixpt:185' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:186' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'cal_phaser_alt_fixpt:190' else
  -- 
  -- 'cal_phaser_alt_fixpt:191' y = a;
  -- 
  -- 'cal_phaser_alt_fixpt:138' v(:) = v * fi(0.7071067810, 0, 32, 32, fm);
  -- 
  -- F2F: End block
  -- 
  -- 'cal_phaser_alt_fixpt:119' d = fi(fi(pi/2, 0, 32, 31, fm) - x, 0, 32, 34, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:120' d2 = fi(d*d, 0, 32, 37, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:121' d4= fi(d2*d2, 0, 32, 43, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:122' d6 = fi(d4*d2, 0, 32, 49, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:123' d8 = fi(d4*d4, 0, 32, 55, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:124' v = fi(fi(1, 0, 1, 0, fm) - fi(0.5, 0, 32, 32, fm)*d2 + fi(1/24, 0, 32, 36, fm)*d4 - 
  -- fi(1/720, 0, 32, 41, fm)*d6 + fi(1/40320, 0, 32, 47, fm)*d8, 1, 32, 30, fm)
  -- 
  -- 'cal_phaser_alt_fixpt:148' v = fi(sign * v, 1, 32, 30, fm);
  -- 
  -- 'cal_phaser_alt_fixpt:154' coder.inline( 'always' );
  -- 
  -- 'cal_phaser_alt_fixpt:155' if nargin==2
  -- 
  -- 'cal_phaser_alt_fixpt:156' re = varargin{ 1 };
  -- 
  -- 'cal_phaser_alt_fixpt:157' im = varargin{ 2 };
  -- 
  -- 'cal_phaser_alt_fixpt:158' if isfi( re ) && isfi( im )
  -- 
  -- Choose wider type
  -- 
  -- 'cal_phaser_alt_fixpt:160' NT = fixed.aggregateType( re, im );
  -- 
  -- 'cal_phaser_alt_fixpt:161' c = complex( fi( re, NT ), fi( im, NT ) );
  -- 
  -- 'cal_phaser_alt_fixpt:34' run_cordic(:) = false;
  -- 
  -- modbin = mod(bin_in,4);
  -- 
  -- this really sucks balls
  -- 
  -- 'cal_phaser_alt_fixpt:41' modbin = fi(bin_in-bitshift(bitshift(bin_in,-2),+2), 0, 2, 0, fm);
  tmp_18 <=  NOT phase_not_empty_1;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp202
  cordic_out_re <= to_signed(1073741824, 32);
  cordic_out_im <= to_signed(0, 32);

  tmp_19 <=  NOT phase_not_empty_1;

  tmp_20 <= to_signed(0, 32);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp67
  
  tmp_21 <= '1' WHEN tmp_1 = to_unsigned(16#200#, 10) ELSE
      '0';

  cal_drift_signed <= signed(cal_drift);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp184
  phase <= to_signed(0, 32);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp171
  p174tmp_1 <= signed'("00110010010000111111011010101000100000");
  p174tmp_add_cast <= p174tmp_1(31 DOWNTO 0);
  tmp_23 <= tmp_22 + p174tmp_add_cast;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp175
  p178tmp_1 <= signed'("00110010010000111111011010101000100000");
  p178tmp_sub_cast <= p178tmp_1(31 DOWNTO 0);
  tmp_24 <= phase_1 - p178tmp_sub_cast;

  p179phase_add_cast <= resize(tmp_25 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 43);
  p179phase_add_cast_1 <= resize(cal_drift_signed, 43);
  p179phase_add_temp <= p179phase_add_cast + p179phase_add_cast_1;
  phase_1 <= p179phase_add_temp(41 DOWNTO 10);

  tmp_26 <= '0';

  
  tmp_22 <= phase_1 WHEN tmp_26 = '0' ELSE
      tmp_24;

  tmp_27 <= '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp67_trueregionp1
  
  tmp_28 <= tmp_22 WHEN tmp_27 = '0' ELSE
      tmp_23;

  
  tmp_29 <= tmp_25 WHEN tmp_21 = '0' ELSE
      tmp_28;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp50
  
  tmp_30 <= tmp_20 WHEN tmp = '0' ELSE
      tmp_29;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp25
  
  tmp_31 <= tmp_25 WHEN tmp = '0' ELSE
      tmp_30;

  
  tmp_32 <= tmp_25 WHEN readyin = '0' ELSE
      tmp_31;

  phase_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        phase_2 <= tmp_32;
      END IF;
    END IF;
  END PROCESS phase_reg_process;


  
  tmp_25 <= phase_2 WHEN tmp_19 = '0' ELSE
      phase;

  p140x_cast <= resize(tmp_25, 33);
  p140x_cast_1 <= resize(p140x_cast, 34);
  p140x_cast_2 <=  - (p140x_cast_1);
  p140x_add_cast <= p140x_cast_2(32 DOWNTO 0);
  p140x_add_cast_1 <= resize(p140x_add_cast(32 DOWNTO 3), 32);
  x <= p140x_add_cast_1 + to_signed(1686629713, 32);

  tmp_33 <= '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp136
  p139tmp_1 <= signed'("00110010010000111111011010101000100");
  p139tmp_sub_cast <= p139tmp_1(31 DOWNTO 0);
  tmp_34 <= x - p139tmp_sub_cast;

  
  tmp_35 <= x WHEN tmp_33 = '0' ELSE
      tmp_34;

  
  tmp_36 <= '1' WHEN tmp_35 < to_signed(0, 32) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_falseregionp127
  sign <= to_signed(16#1#, 2);

  
  tmp_37 <= '1' WHEN tmp_35 < to_signed(0, 32) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp131
  p134tmp_cast <= resize(tmp_35, 33);
  p134tmp_cast_1 <= resize(p134tmp_cast, 34);
  p134tmp_cast_2 <=  - (p134tmp_cast_1);
  p134tmp_cast_3 <= p134tmp_cast_2(32 DOWNTO 0);
  tmp_38 <= p134tmp_cast_3(31 DOWNTO 0);

  
  tmp_39 <= tmp_35 WHEN tmp_37 = '0' ELSE
      tmp_38;

  p125tmp_cast <= tmp_39 & '0';
  
  tmp_40 <= '1' WHEN p125tmp_cast > signed'("011001001000011111101101010100010") ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp123
  p126tmp_1 <= signed'("0011001001000011111101101010100010");
  p126tmp_sub_cast <= p126tmp_1(31 DOWNTO 0);
  tmp_41 <= p126tmp_sub_cast - tmp_39;

  
  tmp_42 <= tmp_39 WHEN tmp_40 = '0' ELSE
      tmp_41;

  p112tmp_cast <= tmp_42 & '0' & '0' & '0';
  
  tmp_43 <= '1' WHEN p112tmp_cast > signed'("00011001001000011111101101010100010") ELSE
      '0';

  d <= unsigned(tmp_42(27 DOWNTO 0) & '0' & '0' & '0' & '0');

  p120d3_mul_temp <= d * d;
  p120d3_mul_temp_1 <= p120d3_mul_temp * d;
  d3 <= p120d3_mul_temp_1(93 DOWNTO 62);

  p121d2_mul_temp <= d * d;
  d2 <= p121d2_mul_temp(62 DOWNTO 31);

  p119d5_mul_temp <= d3 * d2;
  d5 <= p119d5_mul_temp(62 DOWNTO 31);

  p118tmp_sub_cast <= resize(tmp_42 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 78);
  p118tmp_mul_temp <= unsigned'(X"AAAAAAAA") * d3;
  p118tmp_sub_cast_1 <= signed(resize(p118tmp_mul_temp, 78));
  p118tmp_sub_temp <= p118tmp_sub_cast - p118tmp_sub_cast_1;
  p118tmp_add_cast <= resize(p118tmp_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 90);
  p118tmp_mul_temp_1 <= unsigned'(X"88888888") * d5;
  p118tmp_add_cast_1 <= signed(resize(p118tmp_mul_temp_1, 90));
  p118tmp_add_temp <= p118tmp_add_cast + p118tmp_add_cast_1;
  p118tmp_sub_cast_2 <= resize(p118tmp_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 104);
  p118tmp_mul_temp_2 <= d5 * d2;
  p118tmp_cast <= p118tmp_mul_temp_2(62 DOWNTO 31);
  p118tmp_mul_temp_3 <= unsigned'(X"D00D00D0") * p118tmp_cast;
  p118tmp_sub_cast_3 <= signed(resize(p118tmp_mul_temp_3, 104));
  p118tmp_sub_temp_1 <= p118tmp_sub_cast_2 - p118tmp_sub_cast_3;
  tmp_44 <= p118tmp_sub_temp_1(97 DOWNTO 66);

  p117d_sub_cast <= resize(tmp_42 & '0' & '0', 36);
  p117d_sub_temp <= p117d_sub_cast - signed'(X"0C90FDAA2");
  d_1 <= unsigned(p117d_sub_temp(29 DOWNTO 0) & '0' & '0');

  p116d2_mul_temp <= d_1 * d_1;
  d2_1 <= p116d2_mul_temp(62 DOWNTO 31);

  p115d4_mul_temp <= d2_1 * d2_1;
  d4 <= p115d4_mul_temp(62 DOWNTO 31);

  p114d6_mul_temp <= d4 * d2_1;
  d6 <= p114d6_mul_temp(62 DOWNTO 31);

  p107tmp_cast <= tmp_42 & '0';
  
  tmp_45 <= '1' WHEN p107tmp_cast > signed'("010010110110010111110001111111001") ELSE
      '0';

  p113tmp_add_cast <= resize(d_1, 36);
  p113tmp_add_temp <= p113tmp_add_cast + unsigned'(X"400000000");
  p113tmp_sub_cast <= signed(resize(p113tmp_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 74));
  p113tmp_sub_cast_1 <= resize(d2_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  p113tmp_sub_cast_2 <= signed(resize(p113tmp_sub_cast_1, 74));
  p113tmp_sub_temp <= p113tmp_sub_cast - p113tmp_sub_cast_2;
  p113tmp_sub_cast_3 <= resize(p113tmp_sub_temp & '0' & '0' & '0' & '0' & '0', 81);
  p113tmp_mul_temp <= d2_1 * d_1;
  p113tmp_cast <= p113tmp_mul_temp(62 DOWNTO 31);
  p113tmp_mul_temp_1 <= unsigned'(X"AAAAAAAA") * p113tmp_cast;
  p113tmp_sub_cast_4 <= signed(resize(p113tmp_mul_temp_1, 81));
  p113tmp_sub_temp_1 <= p113tmp_sub_cast_3 - p113tmp_sub_cast_4;
  p113tmp_add_cast_1 <= resize(p113tmp_sub_temp_1 & '0' & '0' & '0' & '0' & '0', 88);
  p113tmp_mul_temp_2 <= unsigned'(X"AAAAAAAA") * d4;
  p113tmp_add_cast_2 <= signed(resize(p113tmp_mul_temp_2, 88));
  p113tmp_add_temp_1 <= p113tmp_add_cast_1 + p113tmp_add_cast_2;
  p113tmp_add_cast_3 <= resize(p113tmp_add_temp_1 & '0' & '0' & '0' & '0' & '0', 95);
  p113tmp_mul_temp_3 <= d4 * d_1;
  p113tmp_cast_1 <= p113tmp_mul_temp_3(62 DOWNTO 31);
  p113tmp_mul_temp_4 <= unsigned'(X"88888888") * p113tmp_cast_1;
  p113tmp_add_cast_4 <= signed(resize(p113tmp_mul_temp_4, 95));
  p113tmp_add_temp_2 <= p113tmp_add_cast_3 + p113tmp_add_cast_4;
  p113tmp_sub_cast_5 <= resize(p113tmp_add_temp_2 & '0' & '0' & '0' & '0' & '0' & '0', 103);
  p113tmp_mul_temp_5 <= unsigned'(X"B60B60B6") * d6;
  p113tmp_sub_cast_6 <= signed(resize(p113tmp_mul_temp_5, 103));
  p113tmp_sub_temp_2 <= p113tmp_sub_cast_5 - p113tmp_sub_cast_6;
  p113tmp_sub_cast_7 <= resize(p113tmp_sub_temp_2 & '0' & '0' & '0' & '0' & '0' & '0', 111);
  p113tmp_mul_temp_6 <= d6 * d_1;
  p113tmp_cast_2 <= p113tmp_mul_temp_6(62 DOWNTO 31);
  p113tmp_mul_temp_7 <= unsigned'(X"D00D00D0") * p113tmp_cast_2;
  p113tmp_sub_cast_8 <= signed(resize(p113tmp_mul_temp_7, 111));
  p113tmp_sub_temp_3 <= p113tmp_sub_cast_7 - p113tmp_sub_cast_8;
  p113tmp_add_cast_5 <= resize(p113tmp_sub_temp_3 & '0' & '0' & '0' & '0' & '0' & '0', 119);
  p113tmp_mul_temp_8 <= d4 * d4;
  p113tmp_cast_3 <= p113tmp_mul_temp_8(62 DOWNTO 31);
  p113tmp_mul_temp_9 <= unsigned'(X"D00D00D0") * p113tmp_cast_3;
  p113tmp_add_cast_6 <= signed(resize(p113tmp_mul_temp_9, 119));
  p113tmp_add_temp_3 <= p113tmp_add_cast_5 + p113tmp_add_cast_6;
  p113tmp_cast_4 <= p113tmp_add_temp_3(103 DOWNTO 72);
  p113tmp_mul_temp_10 <= p113tmp_cast_4 * signed'("010110101000001001111001100110011");
  p113tmp_cast_5 <= p113tmp_mul_temp_10(63 DOWNTO 0);
  tmp_46 <= p113tmp_cast_5(63 DOWNTO 32);

  
  tmp_47 <= tmp_44 WHEN tmp_43 = '0' ELSE
      tmp_46;

  p110d2_sub_cast <= resize(tmp_42 & '0', 35);
  p110d2_sub_temp <= signed'("00011001001000011111101101010100010") - p110d2_sub_cast;
  p110d2_d <= unsigned(p110d2_sub_temp(28 DOWNTO 0) & '0' & '0' & '0');
  p110d2_mul_temp <= p110d2_d * p110d2_d;
  d2_2 <= p110d2_mul_temp(62 DOWNTO 31);

  p109d4_mul_temp <= d2_2 * d2_2;
  d4_1 <= p109d4_mul_temp(62 DOWNTO 31);

  p170x_cast <= resize(tmp_25, 33);
  p170x_cast_1 <= resize(p170x_cast, 34);
  p170x_cast_2 <=  - (p170x_cast_1);
  p170x_cast_3 <= p170x_cast_2(32 DOWNTO 0);
  x_1 <= resize(p170x_cast_3(32 DOWNTO 3), 32);

  
  tmp_48 <= '1' WHEN x_1 < to_signed(0, 32) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_falseregionp162
  sign_1 <= to_signed(16#1#, 2);

  
  tmp_49 <= '1' WHEN x_1 < to_signed(0, 32) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp166
  p169tmp_cast <= resize(x_1, 33);
  p169tmp_cast_1 <= resize(p169tmp_cast, 34);
  p169tmp_cast_2 <=  - (p169tmp_cast_1);
  p169tmp_cast_3 <= p169tmp_cast_2(32 DOWNTO 0);
  tmp_50 <= p169tmp_cast_3(31 DOWNTO 0);

  
  tmp_51 <= x_1 WHEN tmp_49 = '0' ELSE
      tmp_50;

  p160tmp_cast <= tmp_51 & '0';
  
  tmp_52 <= '1' WHEN p160tmp_cast > signed'("011001001000011111101101010100010") ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp158
  p161tmp_1 <= signed'("0011001001000011111101101010100010");
  p161tmp_sub_cast <= p161tmp_1(31 DOWNTO 0);
  tmp_53 <= p161tmp_sub_cast - tmp_51;

  
  tmp_54 <= tmp_51 WHEN tmp_52 = '0' ELSE
      tmp_53;

  p144tmp_cast <= tmp_54 & '0' & '0' & '0';
  
  tmp_55 <= '1' WHEN p144tmp_cast > signed'("00011001001000011111101101010100010") ELSE
      '0';

  d_2 <= unsigned(tmp_54(27 DOWNTO 0) & '0' & '0' & '0' & '0');

  p148d3_mul_temp <= d_2 * d_2;
  p148d3_mul_temp_1 <= p148d3_mul_temp * d_2;
  d3_1 <= p148d3_mul_temp_1(93 DOWNTO 62);

  p147d2_mul_temp <= d_2 * d_2;
  d2_3 <= p147d2_mul_temp(62 DOWNTO 31);

  p146d5_mul_temp <= d3_1 * d2_3;
  d5_1 <= p146d5_mul_temp(62 DOWNTO 31);

  p145tmp_sub_cast <= resize(tmp_54 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 78);
  p145tmp_mul_temp <= unsigned'(X"AAAAAAAA") * d3_1;
  p145tmp_sub_cast_1 <= signed(resize(p145tmp_mul_temp, 78));
  p145tmp_sub_temp <= p145tmp_sub_cast - p145tmp_sub_cast_1;
  p145tmp_add_cast <= resize(p145tmp_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 90);
  p145tmp_mul_temp_1 <= unsigned'(X"88888888") * d5_1;
  p145tmp_add_cast_1 <= signed(resize(p145tmp_mul_temp_1, 90));
  p145tmp_add_temp <= p145tmp_add_cast + p145tmp_add_cast_1;
  p145tmp_sub_cast_2 <= resize(p145tmp_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 104);
  p145tmp_mul_temp_2 <= d5_1 * d2_3;
  p145tmp_cast <= p145tmp_mul_temp_2(62 DOWNTO 31);
  p145tmp_mul_temp_3 <= unsigned'(X"D00D00D0") * p145tmp_cast;
  p145tmp_sub_cast_3 <= signed(resize(p145tmp_mul_temp_3, 104));
  p145tmp_sub_temp_1 <= p145tmp_sub_cast_2 - p145tmp_sub_cast_3;
  tmp_56 <= p145tmp_sub_temp_1(97 DOWNTO 66);

  p154d_sub_cast <= resize(tmp_54 & '0' & '0', 36);
  p154d_sub_temp <= p154d_sub_cast - signed'(X"0C90FDAA2");
  d_3 <= unsigned(p154d_sub_temp(29 DOWNTO 0) & '0' & '0');

  p153d2_mul_temp <= d_3 * d_3;
  d2_4 <= p153d2_mul_temp(62 DOWNTO 31);

  p152d4_mul_temp <= d2_4 * d2_4;
  d4_2 <= p152d4_mul_temp(62 DOWNTO 31);

  p151d6_mul_temp <= d4_2 * d2_4;
  d6_1 <= p151d6_mul_temp(62 DOWNTO 31);

  p142tmp_cast <= tmp_54 & '0';
  
  tmp_57 <= '1' WHEN p142tmp_cast > signed'("010010110110010111110001111111001") ELSE
      '0';

  p150tmp_add_cast <= resize(d_3, 36);
  p150tmp_add_temp <= p150tmp_add_cast + unsigned'(X"400000000");
  p150tmp_sub_cast <= signed(resize(p150tmp_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 74));
  p150tmp_sub_cast_1 <= resize(d2_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  p150tmp_sub_cast_2 <= signed(resize(p150tmp_sub_cast_1, 74));
  p150tmp_sub_temp <= p150tmp_sub_cast - p150tmp_sub_cast_2;
  p150tmp_sub_cast_3 <= resize(p150tmp_sub_temp & '0' & '0' & '0' & '0' & '0', 81);
  p150tmp_mul_temp <= d2_4 * d_3;
  p150tmp_cast <= p150tmp_mul_temp(62 DOWNTO 31);
  p150tmp_mul_temp_1 <= unsigned'(X"AAAAAAAA") * p150tmp_cast;
  p150tmp_sub_cast_4 <= signed(resize(p150tmp_mul_temp_1, 81));
  p150tmp_sub_temp_1 <= p150tmp_sub_cast_3 - p150tmp_sub_cast_4;
  p150tmp_add_cast_1 <= resize(p150tmp_sub_temp_1 & '0' & '0' & '0' & '0' & '0', 88);
  p150tmp_mul_temp_2 <= unsigned'(X"AAAAAAAA") * d4_2;
  p150tmp_add_cast_2 <= signed(resize(p150tmp_mul_temp_2, 88));
  p150tmp_add_temp_1 <= p150tmp_add_cast_1 + p150tmp_add_cast_2;
  p150tmp_add_cast_3 <= resize(p150tmp_add_temp_1 & '0' & '0' & '0' & '0' & '0', 95);
  p150tmp_mul_temp_3 <= d4_2 * d_3;
  p150tmp_cast_1 <= p150tmp_mul_temp_3(62 DOWNTO 31);
  p150tmp_mul_temp_4 <= unsigned'(X"88888888") * p150tmp_cast_1;
  p150tmp_add_cast_4 <= signed(resize(p150tmp_mul_temp_4, 95));
  p150tmp_add_temp_2 <= p150tmp_add_cast_3 + p150tmp_add_cast_4;
  p150tmp_sub_cast_5 <= resize(p150tmp_add_temp_2 & '0' & '0' & '0' & '0' & '0' & '0', 103);
  p150tmp_mul_temp_5 <= unsigned'(X"B60B60B6") * d6_1;
  p150tmp_sub_cast_6 <= signed(resize(p150tmp_mul_temp_5, 103));
  p150tmp_sub_temp_2 <= p150tmp_sub_cast_5 - p150tmp_sub_cast_6;
  p150tmp_sub_cast_7 <= resize(p150tmp_sub_temp_2 & '0' & '0' & '0' & '0' & '0' & '0', 111);
  p150tmp_mul_temp_6 <= d6_1 * d_3;
  p150tmp_cast_2 <= p150tmp_mul_temp_6(62 DOWNTO 31);
  p150tmp_mul_temp_7 <= unsigned'(X"D00D00D0") * p150tmp_cast_2;
  p150tmp_sub_cast_8 <= signed(resize(p150tmp_mul_temp_7, 111));
  p150tmp_sub_temp_3 <= p150tmp_sub_cast_7 - p150tmp_sub_cast_8;
  p150tmp_add_cast_5 <= resize(p150tmp_sub_temp_3 & '0' & '0' & '0' & '0' & '0' & '0', 119);
  p150tmp_mul_temp_8 <= d4_2 * d4_2;
  p150tmp_cast_3 <= p150tmp_mul_temp_8(62 DOWNTO 31);
  p150tmp_mul_temp_9 <= unsigned'(X"D00D00D0") * p150tmp_cast_3;
  p150tmp_add_cast_6 <= signed(resize(p150tmp_mul_temp_9, 119));
  p150tmp_add_temp_3 <= p150tmp_add_cast_5 + p150tmp_add_cast_6;
  p150tmp_cast_4 <= p150tmp_add_temp_3(103 DOWNTO 72);
  p150tmp_mul_temp_10 <= p150tmp_cast_4 * signed'("010110101000001001111001100110011");
  p150tmp_cast_5 <= p150tmp_mul_temp_10(63 DOWNTO 0);
  tmp_58 <= p150tmp_cast_5(63 DOWNTO 32);

  
  tmp_59 <= tmp_56 WHEN tmp_55 = '0' ELSE
      tmp_58;

  p157d2_sub_cast <= resize(tmp_54 & '0', 35);
  p157d2_sub_temp <= signed'("00011001001000011111101101010100010") - p157d2_sub_cast;
  p157d2_d <= unsigned(p157d2_sub_temp(28 DOWNTO 0) & '0' & '0' & '0');
  p157d2_mul_temp <= p157d2_d * p157d2_d;
  d2_5 <= p157d2_mul_temp(62 DOWNTO 31);

  p156d4_mul_temp <= d2_5 * d2_5;
  d4_3 <= p156d4_mul_temp(62 DOWNTO 31);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp127
  sign_2 <= to_signed(-16#1#, 2);

  
  tmp_60 <= sign WHEN tmp_36 = '0' ELSE
      sign_2;

  p108tmp_sub_cast <= resize(d2_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  p108tmp_sub_cast_1 <= resize(p108tmp_sub_cast, 71);
  p108tmp_sub_temp <= unsigned'("01000000000000000000000000000000000000000000000000000000000000000000000") - p108tmp_sub_cast_1;
  p108tmp_add_cast <= resize(p108tmp_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 82);
  p108tmp_mul_temp <= unsigned'(X"AAAAAAAA") * d4_1;
  p108tmp_add_cast_1 <= resize(p108tmp_mul_temp, 82);
  p108tmp_add_temp <= p108tmp_add_cast + p108tmp_add_cast_1;
  p108tmp_sub_cast_2 <= resize(p108tmp_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 94);
  p108tmp_mul_temp_1 <= d4_1 * d2_2;
  p108tmp_cast <= p108tmp_mul_temp_1(62 DOWNTO 31);
  p108tmp_mul_temp_2 <= unsigned'(X"B60B60B6") * p108tmp_cast;
  p108tmp_sub_cast_3 <= resize(p108tmp_mul_temp_2, 94);
  p108tmp_sub_temp_1 <= p108tmp_sub_cast_2 - p108tmp_sub_cast_3;
  p108tmp_add_cast_2 <= resize(p108tmp_sub_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 107);
  p108tmp_mul_temp_3 <= d4_1 * d4_1;
  p108tmp_cast_1 <= p108tmp_mul_temp_3(62 DOWNTO 31);
  p108tmp_mul_temp_4 <= unsigned'(X"D00D00D0") * p108tmp_cast_1;
  p108tmp_add_cast_3 <= resize(p108tmp_mul_temp_4, 107);
  p108tmp_add_temp_1 <= p108tmp_add_cast_2 + p108tmp_add_cast_3;
  tmp_61 <= signed(p108tmp_add_temp_1(103 DOWNTO 72));

  
  tmp_62 <= tmp_47 WHEN tmp_45 = '0' ELSE
      tmp_61;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp162
  sign_3 <= to_signed(-16#1#, 2);

  
  tmp_63 <= sign_1 WHEN tmp_48 = '0' ELSE
      sign_3;

  p155tmp_sub_cast <= resize(d2_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  p155tmp_sub_cast_1 <= resize(p155tmp_sub_cast, 71);
  p155tmp_sub_temp <= unsigned'("01000000000000000000000000000000000000000000000000000000000000000000000") - p155tmp_sub_cast_1;
  p155tmp_add_cast <= resize(p155tmp_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 82);
  p155tmp_mul_temp <= unsigned'(X"AAAAAAAA") * d4_3;
  p155tmp_add_cast_1 <= resize(p155tmp_mul_temp, 82);
  p155tmp_add_temp <= p155tmp_add_cast + p155tmp_add_cast_1;
  p155tmp_sub_cast_2 <= resize(p155tmp_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 94);
  p155tmp_mul_temp_1 <= d4_3 * d2_5;
  p155tmp_cast <= p155tmp_mul_temp_1(62 DOWNTO 31);
  p155tmp_mul_temp_2 <= unsigned'(X"B60B60B6") * p155tmp_cast;
  p155tmp_sub_cast_3 <= resize(p155tmp_mul_temp_2, 94);
  p155tmp_sub_temp_1 <= p155tmp_sub_cast_2 - p155tmp_sub_cast_3;
  p155tmp_add_cast_2 <= resize(p155tmp_sub_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 107);
  p155tmp_mul_temp_3 <= d4_3 * d4_3;
  p155tmp_cast_1 <= p155tmp_mul_temp_3(62 DOWNTO 31);
  p155tmp_mul_temp_4 <= unsigned'(X"D00D00D0") * p155tmp_cast_1;
  p155tmp_add_cast_3 <= resize(p155tmp_mul_temp_4, 107);
  p155tmp_add_temp_1 <= p155tmp_add_cast_2 + p155tmp_add_cast_3;
  tmp_64 <= signed(p155tmp_add_temp_1(103 DOWNTO 72));

  
  tmp_65 <= tmp_59 WHEN tmp_57 = '0' ELSE
      tmp_64;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp78
  p105tmp_mul_temp <= tmp_60 * tmp_62;
  p105tmp_cast <= p105tmp_mul_temp(31 DOWNTO 0);
  p105tmp_cast_1 <= unsigned(p105tmp_cast(30 DOWNTO 0) & '0');
  tmp_re_2 <= signed(resize(p105tmp_cast_1(31 DOWNTO 1), 32));
  p105tmp_mul_temp_1 <= tmp_63 * tmp_65;
  tmp_im_2 <= p105tmp_mul_temp_1(31 DOWNTO 0);

  cordic_out_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cordic_out_re_1 <= to_signed(0, 32);
      cordic_out_im_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        cordic_out_im_1 <= tmp_im_3;
        cordic_out_re_1 <= tmp_re_3;
      END IF;
    END IF;
  END PROCESS cordic_out_reg_process;


  
  tmp_re_4 <= cordic_out_re_1 WHEN tmp_18 = '0' ELSE
      cordic_out_re;
  
  tmp_im_4 <= cordic_out_im_1 WHEN tmp_18 = '0' ELSE
      cordic_out_im;

  
  tmp_re_3 <= tmp_re_4 WHEN tmp_16 = '0' ELSE
      tmp_re_2;
  
  tmp_im_3 <= tmp_im_4 WHEN tmp_16 = '0' ELSE
      tmp_im_2;

  ar <= tmp_re_3;

  br <= tmp_re_3;

  ai <= tmp_im_3;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp72_trueregionp1
  bi <= tmp_im_3;

  p0phase_mult2_mul_temp <= ar * br;
  p0phase_mult2_sub_cast <= resize(p0phase_mult2_mul_temp, 65);
  p0phase_mult2_mul_temp_1 <= ai * bi;
  p0phase_mult2_sub_cast_1 <= resize(p0phase_mult2_mul_temp_1, 65);
  p0phase_mult2_sub_temp <= p0phase_mult2_sub_cast - p0phase_mult2_sub_cast_1;
  phase_mult2_re <= p0phase_mult2_sub_temp(61 DOWNTO 30);
  p0phase_mult2_mul_temp_2 <= ar * bi;
  p0phase_mult2_add_cast <= resize(p0phase_mult2_mul_temp_2, 65);
  p0phase_mult2_mul_temp_3 <= ai * br;
  p0phase_mult2_add_cast_1 <= resize(p0phase_mult2_mul_temp_3, 65);
  p0phase_mult2_add_temp <= p0phase_mult2_add_cast + p0phase_mult2_add_cast_1;
  phase_mult2_im <= p0phase_mult2_add_temp(61 DOWNTO 30);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp196
  phase_mult2_re_1 <= to_signed(1073741824, 32);
  phase_mult2_im_1 <= to_signed(0, 32);

  
  tmp_re_6 <= tmp_re_5 WHEN tmp_8 = '0' ELSE
      phase_mult2_re;
  
  tmp_im_6 <= tmp_im_5 WHEN tmp_8 = '0' ELSE
      phase_mult2_im;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp40
  
  tmp_re_7 <= tmp_re_1 WHEN tmp = '0' ELSE
      tmp_re_6;
  
  tmp_im_7 <= tmp_im_1 WHEN tmp = '0' ELSE
      tmp_im_6;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp11
  
  tmp_re_8 <= tmp_re_5 WHEN tmp = '0' ELSE
      tmp_re_7;
  
  tmp_im_8 <= tmp_im_5 WHEN tmp = '0' ELSE
      tmp_im_7;

  
  tmp_re_9 <= tmp_re_5 WHEN readyin = '0' ELSE
      tmp_re_8;
  
  tmp_im_9 <= tmp_im_5 WHEN readyin = '0' ELSE
      tmp_im_8;

  phase_mult2_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_mult2_re_2 <= to_signed(0, 32);
      phase_mult2_im_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        phase_mult2_im_2 <= tmp_im_9;
        phase_mult2_re_2 <= tmp_re_9;
      END IF;
    END IF;
  END PROCESS phase_mult2_reg_process;


  
  tmp_re_5 <= phase_mult2_re_2 WHEN tmp_7 = '0' ELSE
      phase_mult2_re_1;
  
  tmp_im_5 <= phase_mult2_im_2 WHEN tmp_7 = '0' ELSE
      phase_mult2_im_1;

  br_1 <= tmp_re_5;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp74
  
  tmp_66 <= '1' WHEN tmp_1 = to_unsigned(16#001#, 10) ELSE
      '0';

  bi_1 <= tmp_im_5;

  ai_1 <= tmp_im_10;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp14
  
  tmp_re_12 <= tmp_re_10 WHEN tmp = '0' ELSE
      tmp_re_11;
  
  tmp_im_12 <= tmp_im_10 WHEN tmp = '0' ELSE
      tmp_im_11;

  
  tmp_re_13 <= tmp_re_10 WHEN readyin = '0' ELSE
      tmp_re_12;
  
  tmp_im_13 <= tmp_im_10 WHEN readyin = '0' ELSE
      tmp_im_12;

  phase_st_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      phase_st_re_1 <= to_signed(0, 32);
      phase_st_im_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        phase_st_im_1 <= tmp_im_13;
        phase_st_re_1 <= tmp_re_13;
      END IF;
    END IF;
  END PROCESS phase_st_reg_process;


  
  tmp_re_10 <= phase_st_re_1 WHEN tmp_6 = '0' ELSE
      phase_st_re;
  
  tmp_im_10 <= phase_st_im_1 WHEN tmp_6 = '0' ELSE
      phase_st_im;

  ar_1 <= tmp_re_10;

  p98tmp_mul_temp <= ar_1 * br_1;
  p98tmp_sub_cast <= resize(p98tmp_mul_temp, 65);
  p98tmp_mul_temp_1 <= ai_1 * bi_1;
  p98tmp_sub_cast_1 <= resize(p98tmp_mul_temp_1, 65);
  p98tmp_sub_temp <= p98tmp_sub_cast - p98tmp_sub_cast_1;
  tmp_re_14 <= p98tmp_sub_temp(61 DOWNTO 30);
  p98tmp_mul_temp_2 <= ar_1 * bi_1;
  p98tmp_add_cast <= resize(p98tmp_mul_temp_2, 65);
  p98tmp_mul_temp_3 <= ai_1 * br_1;
  p98tmp_add_cast_1 <= resize(p98tmp_mul_temp_3, 65);
  p98tmp_add_temp <= p98tmp_add_cast + p98tmp_add_cast_1;
  tmp_im_14 <= p98tmp_add_temp(61 DOWNTO 30);

  
  tmp_re_15 <= tmp_re_14 WHEN tmp_66 = '0' ELSE
      tmp_re_3;
  
  tmp_im_15 <= tmp_im_14 WHEN tmp_66 = '0' ELSE
      tmp_im_3;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp59
  -- 
  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp42
  
  tmp_re_11 <= tmp_re WHEN tmp = '0' ELSE
      tmp_re_15;
  
  tmp_im_11 <= tmp_im WHEN tmp = '0' ELSE
      tmp_im_15;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp36
  
  tmp_re_16 <= phase_cor_re_1 WHEN tmp = '0' ELSE
      tmp_re_11;
  
  tmp_im_16 <= phase_cor_im_1 WHEN tmp = '0' ELSE
      tmp_im_11;

  -- 'cal_phaser_alt_fixpt:38' if readyin
  
  tmp_re_17 <= phase_cor_re_1 WHEN readyin = '0' ELSE
      tmp_re_16;
  
  tmp_im_17 <= phase_cor_im_1 WHEN readyin = '0' ELSE
      tmp_im_16;

  phase_cor_re <= std_logic_vector(tmp_re_17);

  phase_cor_im <= std_logic_vector(tmp_im_17);

  -- 'cal_phaser_alt_fixpt:24' kar_out = fi(0, 0, 16, 0, fm);
  kar_out_1 <= to_unsigned(16#0000#, 16);

  tmp_67 <=  NOT phase_not_empty_1;

  tmp_68 <= to_unsigned(16#00#, 7);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp63
  
  tmp_69 <= '1' WHEN tmp_1 = to_unsigned(16#200#, 10) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp89
  Nac <= to_unsigned(16#01#, 7);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp187
  Nac_1 <= to_unsigned(16#01#, 7);

  Nac_2 <= tmp_70 + to_unsigned(16#01#, 7);

  
  tmp_71 <= '1' WHEN Nac_2 > to_unsigned(16#40#, 7) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp63_trueregionp1
  
  tmp_72 <= Nac_2 WHEN tmp_71 = '0' ELSE
      Nac;

  
  tmp_73 <= tmp_70 WHEN tmp_69 = '0' ELSE
      tmp_72;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp46
  
  tmp_74 <= tmp_68 WHEN tmp = '0' ELSE
      tmp_73;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp19
  
  tmp_75 <= tmp_70 WHEN tmp = '0' ELSE
      tmp_74;

  
  tmp_76 <= tmp_70 WHEN readyin = '0' ELSE
      tmp_75;

  Nac_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Nac_3 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Nac_3 <= tmp_76;
      END IF;
    END IF;
  END PROCESS Nac_reg_process;


  
  tmp_70 <= Nac_3 WHEN tmp_67 = '0' ELSE
      Nac_1;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp55
  p0kar_out_sub_cast <= resize(tmp_1 & '0', 12);
  kar_out_2 <= resize(resize(resize(p0kar_out_sub_cast, 13) - to_unsigned(16#0001#, 13), 10) * (resize(tmp_70, 8) - to_unsigned(16#01#, 8)), 16);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp32
  
  tmp_77 <= kar_out_1 WHEN tmp = '0' ELSE
      kar_out_2;

  
  tmp_78 <= kar_out_1 WHEN readyin = '0' ELSE
      tmp_77;

  kar_out <= std_logic_vector(tmp_78);

  tmp_79 <=  NOT phase_not_empty_1;

  tmp_80 <= to_signed(16#0#, 2);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp65
  
  tmp_81 <= '1' WHEN tmp_1 = to_unsigned(16#200#, 10) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp190
  tick <= to_signed(16#1#, 2);

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp65_trueregionp1
  p103tmp_1 <=  - (resize(tmp_82, 3));
  tmp_83 <= p103tmp_1(1 DOWNTO 0);

  
  tmp_84 <= tmp_82 WHEN tmp_81 = '0' ELSE
      tmp_83;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp48
  
  tmp_85 <= tmp_80 WHEN tmp = '0' ELSE
      tmp_84;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp22
  
  tmp_86 <= tmp_82 WHEN tmp = '0' ELSE
      tmp_85;

  
  tmp_87 <= tmp_82 WHEN readyin = '0' ELSE
      tmp_86;

  tick_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tick_1 <= to_signed(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tick_1 <= tmp_87;
      END IF;
    END IF;
  END PROCESS tick_reg_process;


  -- 'cal_phaser_alt_fixpt:25' tick_out = fi(tick, 1, 2, 0, fm);
  
  tmp_82 <= tick_1 WHEN tmp_79 = '0' ELSE
      tick;

  tick_out <= std_logic_vector(tmp_82);

  -- 'cal_phaser_alt_fixpt:28' readyout = false;
  readyout_1 <= '0';

  
  tmp_88 <= '1' WHEN tmp_70 = to_unsigned(16#40#, 7) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp82
  readyout_2 <= '1';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp44
  
  tmp_89 <= readyout_1 WHEN tmp_88 = '0' ELSE
      readyout_2;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp16
  
  tmp_90 <= readyout_1 WHEN tmp = '0' ELSE
      tmp_89;

  
  tmp_91 <= readyout_1 WHEN readyin = '0' ELSE
      tmp_90;

  -- 'cal_phaser_alt_fixpt:27' update_drift = false;
  update_drift_1 <= '0';

  tmp_92 <= '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp61
  
  tmp_93 <= '1' WHEN tmp_1 = to_unsigned(16#200#, 10) ELSE
      '0';

  
  tmp_94 <= '1' WHEN Nac_2 > to_unsigned(16#40#, 7) ELSE
      '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp86
  update_drift_2 <= '1';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp61_trueregionp1
  
  tmp_95 <= update_drift_1 WHEN tmp_94 = '0' ELSE
      update_drift_2;

  
  tmp_96 <= update_drift_1 WHEN tmp_93 = '0' ELSE
      tmp_95;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp38
  
  tmp_97 <= tmp_92 WHEN tmp = '0' ELSE
      tmp_96;

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp8
  
  tmp_98 <= update_drift_1 WHEN tmp = '0' ELSE
      tmp_97;

  
  tmp_99 <= update_drift_1 WHEN readyin = '0' ELSE
      tmp_98;

  -- 'cal_phaser_alt_fixpt:26' readycal = false;
  readycal_1 <= '0';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp57
  readycal_2 <= '1';

  -- HDL code generation from MATLAB function: cal_phaser_alt_fixpt_trueregionp34
  
  tmp_100 <= readycal_1 WHEN tmp = '0' ELSE
      readycal_2;

  
  tmp_101 <= readycal_1 WHEN readyin = '0' ELSE
      tmp_100;

  ce_out <= clk_enable;

  readyout <= tmp_91;

  update_drift <= tmp_99;

  readycal <= tmp_101;

END rtl;

